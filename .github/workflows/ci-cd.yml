name: "‚è∞ Scheduler Backend - CI/CD Pipeline"

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

# Controle de concorr√™ncia para evitar execu√ß√µes simult√¢neas
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# Vari√°veis de ambiente global
env:
  SERVICE_NAME: scheduler
  STACK_NAME: conexao-scheduler
  DOCKER_NETWORK_NAME: conexao-network-swarm

permissions:
  id-token: write    # Necess√°rio para OIDC com Azure (azure/login@v2)
  contents: read     # Necess√°rio para checkout em jobs

jobs:
  validate-and-build:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions:
      contents: read
      id-token: write
    outputs:
      has_keyvault: ${{ steps.check_secrets.outputs.has_keyvault }}
      has_azure_creds: ${{ steps.check_secrets.outputs.has_azure_creds }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4.3.0
        with:
          fetch-depth: 1


      - name: Validate Docker Compose
        run: |
          docker compose -f docker-compose.yml config -q
          echo "‚úÖ Docker Compose syntax is valid"

      - name: Security Validation
        run: |
          echo "üîí Verificando seguran√ßa da configura√ß√£o..."
          # S√≥ acusa erro se encontrar password: com valor literal (n√£o vari√°vel)
          if grep -E '^\s*password\s*:\s*[^ $\{]' docker-compose.yml | grep -v '#' | grep -v 'external:'; then
            echo "‚ùå Encontrada(s) senha(s) hardcoded literal em docker-compose.yml"
            exit 1
          else
            echo "‚úÖ Nenhuma senha hardcoded literal encontrada"
          fi

      - name: üîé Validar OIDC Azure
        id: check_secrets
        env:
          AZURE_CLIENT_ID: ${{ vars.AZURE_CLIENT_ID || secrets.AZURE_CLIENT_ID }}
          AZURE_TENANT_ID: ${{ vars.AZURE_TENANT_ID || secrets.AZURE_TENANT_ID }}
          AZURE_SUBSCRIPTION_ID: ${{ vars.AZURE_SUBSCRIPTION_ID || secrets.AZURE_SUBSCRIPTION_ID }}
          AZURE_KEYVAULT_ENDPOINT: ${{ vars.AZURE_KEYVAULT_ENDPOINT || secrets.AZURE_KEYVAULT_ENDPOINT }}
          AZURE_KEYVAULT_NAME: ${{ vars.AZURE_KEYVAULT_NAME || secrets.AZURE_KEYVAULT_NAME }}
        run: |
          set -Eeuo pipefail
          missing=()
          for var in AZURE_CLIENT_ID AZURE_TENANT_ID AZURE_SUBSCRIPTION_ID; do
            if [[ -z "${!var:-}" ]]; then
              missing+=("$var")
            fi
          done
          if (( ${#missing[@]} )); then
            printf '‚ùå GitHub Secrets obrigat√≥rios ausentes: %s\n' "${missing[*]}"
            exit 1
          fi
          echo "‚úÖ Identificadores Azure configurados via vars (fallback para secrets)"

          # Key Vault √© opcional - verificar ENDPOINT primeiro, depois NAME
          if [[ -n "${AZURE_KEYVAULT_ENDPOINT:-}" ]]; then
            echo "‚úÖ AZURE_KEYVAULT_ENDPOINT configurado via vars"
            echo "has_keyvault=true" >> "$GITHUB_OUTPUT"
            # Extrair nome do endpoint para compatibilidade
            KEYVAULT_NAME=$(echo "$AZURE_KEYVAULT_ENDPOINT" | sed 's|https://\(.*\)\.vault\.azure\.net/.*|\1|')
            echo "keyvault_name=$KEYVAULT_NAME" >> "$GITHUB_OUTPUT"
          elif [[ -n "${AZURE_KEYVAULT_NAME:-}" ]]; then
            echo "‚úÖ AZURE_KEYVAULT_NAME configurado via vars (fallback)"
            echo "has_keyvault=true" >> "$GITHUB_OUTPUT"
            echo "keyvault_name=$AZURE_KEYVAULT_NAME" >> "$GITHUB_OUTPUT"
          else
            echo "‚ÑπÔ∏è Nenhum Key Vault configurado - prosseguindo sem Azure Key Vault"
            echo "has_keyvault=false" >> "$GITHUB_OUTPUT"
          fi

          echo "has_azure_creds=true" >> "$GITHUB_OUTPUT"

      # Upload artifacts removido para evitar storage quota

      - name: Validation completed
        run: |
          echo "‚úÖ Valida√ß√£o conclu√≠da - pronto para deploy"

  deploy-selfhosted:
    needs: validate-and-build
    runs-on: [self-hosted, Linux, X64, conexao-de-sorte-backend-scheduler]
    timeout-minutes: 15
    if: github.ref == 'refs/heads/main'
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4.3.0
        with:
          clean: true
          fetch-depth: 1

      - name: üîê Azure Login (OIDC)
        if: ${{ needs.validate-and-build.outputs.has_azure_creds == 'true' }}
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Get secrets from Azure Key Vault (via AZ CLI)
        if: ${{ needs.validate-and-build.outputs.has_keyvault == 'true' }}
        shell: bash
        run: |
          echo "Fetching secrets from Azure Key Vault using Azure CLI..."
          SECRETS_LIST=(
            "conexao-de-sorte-database-r2dbc-url"
            "conexao-de-sorte-database-username"
            "conexao-de-sorte-database-password"
            "conexao-de-sorte-redis-host"
            "conexao-de-sorte-redis-port"
            "conexao-de-sorte-redis-password"
            "conexao-de-sorte-redis-database"
            "conexao-de-sorte-jwt-issuer"
            "conexao-de-sorte-jwt-jwks-uri"
            "conexao-de-sorte-jwt-secret"
            "conexao-de-sorte-jwt-signing-key"
            "conexao-de-sorte-jwt-verification-key"
            "conexao-de-sorte-rabbitmq-host"
            "conexao-de-sorte-rabbitmq-port"
            "conexao-de-sorte-rabbitmq-username"
            "conexao-de-sorte-rabbitmq-password"
            "conexao-de-sorte-rabbitmq-vhost"
            "conexao-de-sorte-server-port"
          )

          for secret_name in "${SECRETS_LIST[@]}"; do
            echo "Fetching secret: $secret_name"

            secret_value=$(az keyvault secret show --vault-name "${{ secrets.AZURE_KEYVAULT_NAME }}" --name "$secret_name" --query "value" -o tsv 2>/dev/null)

            if [[ -n "$secret_value" ]]; then
              echo "::add-mask::$secret_value"
              env_var_name=$(echo "$secret_name" | tr '-' '_' | tr '[:lower:]' '[:upper:]')
              echo "${env_var_name}=${secret_value}" >> $GITHUB_ENV
              echo "Secret '$secret_name' fetched and set as environment variable '${env_var_name}'."
            else
              echo "Warning: Secret '$secret_name' not found in Azure Key Vault."
            fi
          done

      - name: üîê Docker Registry Login
        run: |
          echo "üîê Fazendo login no GitHub Container Registry..."
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          echo "‚úÖ Login no GHCR realizado com sucesso"

      - name: üîê Create Docker Secrets
        if: ${{ env.CONEXAO_DE_SORTE_DATABASE_PASSWORD != '' && env.CONEXAO_DE_SORTE_REDIS_PASSWORD != '' }}
        run: |
          echo "Creating Docker secrets..."

          # Remover servi√ßos dependentes primeiro se existirem
          if docker service ls --filter name="conexao-scheduler" --format "{{.Name}}" | grep -q "conexao-scheduler"; then
            echo "‚ö†Ô∏è Removendo servi√ßos dependentes do Scheduler primeiro..."
            docker service ls --filter name="conexao-scheduler" --format "{{.Name}}" | xargs -r docker service rm || true
            sleep 5
          fi

          # Lista de secrets para o Scheduler (18 secrets)
          declare -A SECRETS_MAP=(
            ["conexao-de-sorte-database-r2dbc-url"]="$CONEXAO_DE_SORTE_DATABASE_R2DBC_URL"
            ["conexao-de-sorte-database-username"]="$CONEXAO_DE_SORTE_DATABASE_USERNAME"
            ["conexao-de-sorte-database-password"]="$CONEXAO_DE_SORTE_DATABASE_PASSWORD"
            ["conexao-de-sorte-redis-host"]="$CONEXAO_DE_SORTE_REDIS_HOST"
            ["conexao-de-sorte-redis-port"]="$CONEXAO_DE_SORTE_REDIS_PORT"
            ["conexao-de-sorte-redis-password"]="$CONEXAO_DE_SORTE_REDIS_PASSWORD"
            ["conexao-de-sorte-redis-database"]="$CONEXAO_DE_SORTE_REDIS_DATABASE"
            ["conexao-de-sorte-jwt-issuer"]="$CONEXAO_DE_SORTE_JWT_ISSUER"
            ["conexao-de-sorte-jwt-jwks-uri"]="$CONEXAO_DE_SORTE_JWT_JWKS_URI"
            ["conexao-de-sorte-jwt-secret"]="$CONEXAO_DE_SORTE_JWT_SECRET"
            ["conexao-de-sorte-jwt-signing-key"]="$CONEXAO_DE_SORTE_JWT_SIGNING_KEY"
            ["conexao-de-sorte-jwt-verification-key"]="$CONEXAO_DE_SORTE_JWT_VERIFICATION_KEY"
            ["conexao-de-sorte-rabbitmq-host"]="$CONEXAO_DE_SORTE_RABBITMQ_HOST"
            ["conexao-de-sorte-rabbitmq-port"]="$CONEXAO_DE_SORTE_RABBITMQ_PORT"
            ["conexao-de-sorte-rabbitmq-username"]="$CONEXAO_DE_SORTE_RABBITMQ_USERNAME"
            ["conexao-de-sorte-rabbitmq-password"]="$CONEXAO_DE_SORTE_RABBITMQ_PASSWORD"
            ["conexao-de-sorte-rabbitmq-vhost"]="$CONEXAO_DE_SORTE_RABBITMQ_VHOST"
            ["conexao-de-sorte-server-port"]="$CONEXAO_DE_SORTE_SERVER_PORT"
          )

          # Processar cada secret
          for secret_name in "${!SECRETS_MAP[@]}"; do
            secret_value="${SECRETS_MAP[$secret_name]}"
            docker_secret_name=$(echo "$secret_name" | tr '[:lower:]' '[:upper:]' | tr '-' '_')

            if [[ -n "$secret_value" ]]; then
              # Remover secret existente se necess√°rio
              if docker secret ls --format "{{.Name}}" | grep -q "^${docker_secret_name}$"; then
                echo "‚ö†Ô∏è Removendo secret existente: $docker_secret_name"
                docker secret rm "$docker_secret_name" || true
                sleep 1
              fi

              # Criar novo secret
              printf "$secret_value" | docker secret create "$docker_secret_name" -
              echo "‚úÖ Secret criado: $docker_secret_name"
            else
              echo "‚ö†Ô∏è Secret vazio ou n√£o encontrado: $secret_name"
            fi
          done

          echo "Docker secrets created."

      - name: üîç Preparar ambiente de deploy
        run: |
          echo "üîç Preparando ambiente para deploy do Scheduler..."

          # Verificar arquivos necess√°rios
          echo "üîç Verificando arquivos necess√°rios..."
          for required_file in "docker-compose.yml"; do
            if [[ -f "$required_file" ]]; then
              echo "‚úÖ $required_file encontrado"
            else
              echo "‚ùå $required_file N√ÉO encontrado"
              exit 1
            fi
          done

          # Verificar/criar diret√≥rios espec√≠ficos do Scheduler
          required_dirs=(
            "logs"
            "config"
          )

          for required_dir in "${required_dirs[@]}"; do
            if [[ -d "$required_dir" ]]; then
              echo "‚úÖ Diret√≥rio $required_dir existe"
            else
              echo "‚ö†Ô∏è Diret√≥rio $required_dir n√£o existe - criando..."
              mkdir -p "$required_dir"
            fi
          done

          # Verificar rede Docker Swarm
          echo "üîç Verificando rede Docker Swarm..."
          if docker network ls | grep -q "${DOCKER_NETWORK_NAME}"; then
            echo "‚úÖ Rede ${DOCKER_NETWORK_NAME} existe"
          else
            echo "‚ùå Rede ${DOCKER_NETWORK_NAME} n√£o encontrada"
            echo "üí° Criando rede overlay para Docker Swarm..."
            docker network create --driver overlay --attachable "${DOCKER_NETWORK_NAME}" || echo "‚ö†Ô∏è Rede j√° existe ou erro na cria√ß√£o"
          fi

      - name: üßπ Limpeza completa de recursos antigos
        run: |
          echo "üßπ Iniciando limpeza completa de recursos do Scheduler..."

          # Configurar vari√°veis de ambiente
          export COMPOSE_PROJECT_NAME="${STACK_NAME}"
          SERVICE_NAME="${STACK_NAME}_scheduler"

          # 1. Parar e remover servi√ßos Docker Swarm
          echo "üîç Verificando servi√ßos Docker Swarm existentes..."
          if docker service ls --filter name="${STACK_NAME}_" --format "{{.Name}}" | grep -q "${STACK_NAME}_"; then
            echo "‚ö†Ô∏è Encontrados servi√ßos existentes do Scheduler - removendo..."

            # Escalar para 0 r√©plicas primeiro (graceful shutdown)
            for service in $(docker service ls --filter name="${STACK_NAME}_" --format "{{.Name}}"); do
              echo "üìâ Escalando $service para 0 r√©plicas..."
              docker service scale "$service=0" || echo "‚ö†Ô∏è Falha ao escalar $service"
            done

            # Aguardar parada das tarefas
            echo "‚è≥ Aguardando parada das tarefas..."
            sleep 15

            # Remover servi√ßos
            for service in $(docker service ls --filter name="${STACK_NAME}_" --format "{{.Name}}"); do
              echo "üóëÔ∏è Removendo servi√ßo: $service"
              docker service rm "$service" || echo "‚ö†Ô∏è Falha ao remover $service"
            done

            # Aguardar remo√ß√£o completa
            echo "‚è≥ Aguardando remo√ß√£o completa dos servi√ßos..."
            timeout=90
            start_time=$(date +%s)
            while docker service ls --filter name="${STACK_NAME}_" --format "{{.Name}}" | grep -q "${STACK_NAME}_"; do
              current_time=$(date +%s)
              elapsed=$((current_time - start_time))
              if [[ $elapsed -gt $timeout ]]; then
                echo "‚ö†Ô∏è Timeout aguardando remo√ß√£o dos servi√ßos"
                break
              fi
              echo "‚è≥ Aguardando... ($elapsed/${timeout}s)"
              sleep 5
            done
          fi

          # 2. Remover stack se ainda existir
          if docker stack ls --format "{{.Name}}" | grep -q "^${STACK_NAME}$"; then
            echo "‚ö†Ô∏è Stack ${STACK_NAME} ainda existe - removendo..."
            docker stack rm "${STACK_NAME}"
            sleep 10
          fi

          # 3. Limpeza de containers √≥rf√£os (se existirem)
          echo "üîç Verificando containers √≥rf√£os..."
          orphan_containers=$(docker ps -a --filter name="*scheduler*" --format "{{.ID}} {{.Names}}" | grep -E "(conexao-scheduler|scheduler)" || true)
          if [[ -n "$orphan_containers" ]]; then
            echo "‚ö†Ô∏è Encontrados containers √≥rf√£os do Scheduler:"
            echo "$orphan_containers"
            echo "$orphan_containers" | while read container_id container_name; do
              if [[ -n "$container_id" ]]; then
                echo "üóëÔ∏è Removendo container √≥rf√£o: $container_name ($container_id)"
                docker stop "$container_id" 2>/dev/null || true
                docker rm "$container_id" 2>/dev/null || true
              fi
            done
          fi

          # 4. Limpeza de imagens antigas (opcional - manter apenas algumas vers√µes)
          echo "üîç Limpeza de imagens antigas do Scheduler..."
          old_images=$(docker images ghcr.io/wibson82/conexao-de-sorte-backend-scheduler/scheduler --format "{{.ID}} {{.Repository}}:{{.Tag}}" | tail -n +4 || true)
          if [[ -n "$old_images" ]]; then
            echo "‚ö†Ô∏è Removendo imagens antigas (mantendo 3 mais recentes):"
            echo "$old_images" | while read image_id image_name; do
              if [[ -n "$image_id" && "$image_name" != *"latest"* ]]; then
                echo "üóëÔ∏è Removendo imagem antiga: $image_name ($image_id)"
                docker rmi "$image_id" 2>/dev/null || true
              fi
            done
          fi

          echo "‚úÖ Limpeza completa conclu√≠da"

      - name: üåê Garantir rede Swarm compartilhada
        run: |
          echo "üåê Verificando e configurando rede Docker Swarm compartilhada..."

          # Verificar se Docker Swarm est√° ativo
          if ! docker info --format '{{.Swarm.LocalNodeState}}' | grep -q "active"; then
            echo "‚ö†Ô∏è Docker Swarm n√£o est√° ativo - inicializando..."
            docker swarm init --advertise-addr $(hostname -I | awk '{print $1}') || echo "‚ö†Ô∏è Swarm j√° pode estar inicializado"
          fi

          # Verificar/criar rede overlay compartilhada
          NETWORK_NAME="${DOCKER_NETWORK_NAME}"
          if ! docker network ls --filter name="^${NETWORK_NAME}$" --format "{{.Name}}" | grep -q "^${NETWORK_NAME}$"; then
            echo "üîß Criando rede overlay compartilhada: ${NETWORK_NAME}"
            docker network create \
              --driver overlay \
              --attachable \
              --subnet=10.10.0.0/16 \
              --gateway=10.10.0.1 \
              "${NETWORK_NAME}"
            echo "‚úÖ Rede ${NETWORK_NAME} criada com sucesso"
          else
            echo "‚úÖ Rede ${NETWORK_NAME} j√° existe"
          fi

          # Verificar propriedades da rede
          echo "üìä Propriedades da rede ${NETWORK_NAME}:"
          docker network inspect "${NETWORK_NAME}" --format "{{.Driver}} - {{.Scope}} - {{.IPAM.Config}}" || true

      - name: üöÄ Deploy to Docker Swarm
        run: |
          echo "üöÄ Iniciando deploy do Scheduler no Docker Swarm..."

          # Verificar se temos os segredos m√≠nimos necess√°rios
          if [[ -z "${CONEXAO_DE_SORTE_DATABASE_R2DBC_URL}" ]] || [[ -z "${CONEXAO_DE_SORTE_DATABASE_USERNAME}" ]] || [[ -z "${CONEXAO_DE_SORTE_DATABASE_PASSWORD}" ]]; then
            echo "‚ùå Segredos do banco de dados n√£o configurados"
            echo "‚ö†Ô∏è Verifique:"
            echo "  - Se os segredos existem no Azure Key Vault"
            echo "  - Se os segredos est√£o configurados como GitHub Secrets"
            echo "  - Se a integra√ß√£o com Azure Key Vault est√° funcionando"
            exit 1
          fi

          if [[ -z "${CONEXAO_DE_SORTE_REDIS_HOST}" ]] || [[ -z "${CONEXAO_DE_SORTE_REDIS_PASSWORD}" ]]; then
            echo "‚ùå Segredos do Redis n√£o configurados"
            exit 1
          fi

          if [[ -z "${CONEXAO_DE_SORTE_JWT_SECRET}" ]] || [[ -z "${CONEXAO_DE_SORTE_JWT_ISSUER}" ]]; then
            echo "‚ùå Segredos JWT n√£o configurados"
            exit 1
          fi

          if [[ -z "${CONEXAO_DE_SORTE_RABBITMQ_HOST}" ]] || [[ -z "${CONEXAO_DE_SORTE_RABBITMQ_PASSWORD}" ]]; then
            echo "‚ùå Segredos RabbitMQ n√£o configurados"
            exit 1
          fi

          echo "‚úÖ Todos os segredos necess√°rios est√£o configurados"

          # Configurar vari√°veis de ambiente para o deploy
          export COMPOSE_PROJECT_NAME="${STACK_NAME}"

          # Pull da imagem mais recente
          echo "üì• Fazendo pull da imagem mais recente..."
          if ! docker pull ghcr.io/wibson82/conexao-de-sorte-backend-scheduler:latest; then
            echo "‚ùå Falha no pull da imagem - verificando se existe localmente..."
            if ! docker image inspect ghcr.io/wibson82/conexao-de-sorte-backend-scheduler:latest >/dev/null 2>&1; then
              echo "‚ùå Imagem n√£o encontrada localmente! Listando imagens dispon√≠veis:"
              docker images | grep -E "(conexao-de-sorte-backend-scheduler|REPOSITORY)" || echo "Nenhuma imagem do scheduler encontrada"
              exit 1
            else
              echo "‚úÖ Usando imagem local existente"
            fi
          else
            echo "‚úÖ Pull da imagem realizado com sucesso"
          fi

          # Deploy usando Docker Stack
          echo "üîÑ Executando deploy stack..."
          if docker stack deploy -c docker-compose.yml "${STACK_NAME}"; then
            echo "‚úÖ Deploy executado com sucesso"
            echo "üìã Verificando se servi√ßos foram criados..."
            sleep 5
            docker service ls --filter name="${STACK_NAME}_" --format "table {{.Name}}\t{{.Replicas}}\t{{.Image}}"
          else
            echo "‚ùå Falha no deploy do stack"
            echo "üîç Verificando logs de erro..."
            docker service ls --filter name="${STACK_NAME}_" --format "table {{.Name}}\t{{.Replicas}}\t{{.Image}}" || echo "Nenhum servi√ßo criado"
            exit 1
          fi

      - name: üîç Verifica√ß√£o p√≥s-deploy
        run: |
          echo "üîç Verificando status do deploy..."

          # Aguardar alguns segundos para inicializa√ß√£o
          echo "‚è≥ Aguardando inicializa√ß√£o dos servi√ßos..."
          sleep 30

          # Verificar status dos servi√ßos
          echo "üìä Status dos servi√ßos do Scheduler:"
          docker service ls --filter name="${STACK_NAME}_*" --format "table {{.Name}}\t{{.Replicas}}\t{{.Image}}\t{{.Ports}}"

          # Verificar tarefas dos servi√ßos (para debug)
          echo "üìã Tarefas dos servi√ßos:"
          for service in $(docker service ls --filter name="${STACK_NAME}_*" --format "{{.Name}}" ); do
            echo "=== $service ==="
            docker service ps "$service" --no-trunc --format "table {{.Name}}\t{{.Node}}\t{{.CurrentState}}\t{{.Error}}"
          done

          # Health check espec√≠fico do Scheduler
          echo "üè• Verificando sa√∫de dos servi√ßos..."
          service_name="${STACK_NAME}_scheduler"
          if docker service ls --filter name="$service_name" --format "{{.Name}}" | grep -q "$service_name"; then
            echo "‚úÖ Servi√ßo $service_name encontrado"
            timeout=180
            echo "‚è≥ Aguardando servi√ßo ficar saud√°vel (timeout: ${timeout}s)..."
            start_time=$(date +%s)
            healthy=0
            while true; do
              current_time=$(date +%s)
              elapsed=$((current_time - start_time))
              if [[ $elapsed -gt $timeout ]]; then
                echo "‚ö†Ô∏è Timeout aguardando servi√ßo ficar saud√°vel"
                break
              fi
              replicas=$(docker service ls --filter name="$service_name" --format "{{.Replicas}}")
              # Busca o container mais recente do servi√ßo
              container_id=$(docker ps --filter "name=${service_name}" --format "{{.ID}}" | head -1)
              if [[ -n "$container_id" ]]; then
                health_status=$(docker inspect --format='{{.State.Health.Status}}' "$container_id" 2>/dev/null || echo "no-health-check")
                echo "‚è≥ ($elapsed/${timeout}s) - R√©plicas: $replicas - Health: $health_status"
                if [[ "$health_status" == "healthy" ]]; then
                  echo "‚úÖ Container est√° healthy!"
                  healthy=1
                  break
                fi
                # Mostra logs do container se estiver demorando
                if (( elapsed > 60 )); then
                  echo "--- √öltimos logs do container $container_id ---"
                  docker logs --tail 20 "$container_id" || true
                  echo "----------------------------------------------"
                fi
              else
                echo "‚è≥ ($elapsed/${timeout}s) - Nenhum container encontrado para $service_name"
              fi
              sleep 10
            done
            if [[ $healthy -ne 1 ]]; then
              echo "‚ùå Servi√ßo n√£o ficou healthy. Exibindo logs do container mais recente:"
              last_container=$(docker ps -a --filter "name=${service_name}" --format "{{.ID}}" | head -1)
              if [[ -n "$last_container" ]]; then
                docker logs --tail 50 "$last_container" || true
              fi
            fi
          else
            echo "‚ùå Servi√ßo $service_name n√£o encontrado"
          fi
          echo "üìä Status final dos servi√ßos:"
          docker service ls --filter name="${STACK_NAME}_*" --format "table {{.Name}}\t{{.Replicas}}\t{{.Image}}"

      - name: üè• Verificar Deploy no Runner (Local Container Check)
        run: |
          echo "üè• Verificando se o deploy foi bem-sucedido no runner..."

          # Verificar se o container est√° rodando e healthy
          timeout=180
          interval=10
          elapsed=0

          while [ $elapsed -lt $timeout ]; do
            echo "üîé Verificando containers do Scheduler (${elapsed}/${timeout}s)..."
            # Buscar container mais recente do scheduler
            container_id=$(docker ps --filter "name=conexao-scheduler" --format "{{.ID}}" | head -1)
            if [[ -n "$container_id" ]]; then
              container_name=$(docker inspect --format='{{.Name}}' "$container_id" | sed 's|/||')
              health_status=$(docker inspect --format='{{.State.Health.Status}}' "$container_id" 2>/dev/null || echo "no-health-check")
              echo "üìä Container encontrado: $container_name ($container_id) - Health: $health_status"
              if [[ "$health_status" == "healthy" ]]; then
                echo "‚úÖ Container do Scheduler est√° healthy no runner"
                echo "üéØ Deploy confirmado com sucesso!"
                exit 0
              elif [[ "$health_status" == "no-health-check" ]]; then
                echo "‚ö†Ô∏è Container sem health check configurado, verificando se est√° rodando..."
                uptime=$(docker inspect --format='{{.State.StartedAt}}' "$container_id" | xargs -I {} date -d {} +%s)
                current_time=$(date +%s)
                running_time=$((current_time - uptime))
                if [ $running_time -gt 30 ]; then
                  echo "‚úÖ Container rodando h√° ${running_time}s - considerado est√°vel"
                  echo "üéØ Deploy confirmado com sucesso!"
                  exit 0
                fi
              else
                echo "‚ö†Ô∏è Container health status: $health_status"
                if (( elapsed > 60 )); then
                  echo "--- √öltimos logs do container $container_id ---"
                  docker logs --tail 20 "$container_id" || true
                  echo "----------------------------------------------"
                fi
              fi
            else
              echo "‚ö†Ô∏è Nenhum container do Scheduler encontrado rodando"
            fi
            sleep "$interval"
            elapsed=$((elapsed + interval))
          done
          echo "‚ùå Timeout: Scheduler n√£o est√° healthy ap√≥s ${timeout}s"
          echo "üìã Listando containers atuais:"
          docker ps --filter "name=conexao-scheduler" --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
          # Exibe logs do container mais recente
          last_container=$(docker ps -a --filter "name=conexao-scheduler" --format "{{.ID}}" | head -1)
          if [[ -n "$last_container" ]]; then
            echo "--- √öltimos logs do container $last_container ---"
            docker logs --tail 50 "$last_container" || true
            echo "----------------------------------------------"
          fi
          exit 1

  cleanup-artifacts:
    needs: deploy-selfhosted
    runs-on: ubuntu-latest
    timeout-minutes: 5
    if: always()
    permissions:
      contents: read
    steps:
      - name: Cleanup completed
        run: |
          echo "üßπ Limpeza de artefatos conclu√≠da"
          echo "üìä Status do workflow: ${{ needs.deploy-selfhosted.result }}"