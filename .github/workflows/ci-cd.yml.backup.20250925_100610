name: "⏰ Scheduler Backend - CI/CD Pipeline"

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
  schedule:
    - cron: '0 2 * * 1'  # Weekly security scan

# Controle de concorrência para evitar execuções simultâneas
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# Variáveis de ambiente global
env:
  SERVICE_NAME: scheduler
  STACK_NAME: conexao-scheduler
  DOCKER_NETWORK_NAME: conexao-network-swarm
  JAVA_VERSION: '25'
  MAVEN_OPTS: '-Xmx1024m -XX:MaxMetaspaceSize=256m'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/scheduler

permissions:
  id-token: write      # Necessário para OIDC com Azure
  contents: read       # Necessário para checkout
  packages: write      # Necessário para push no GHCR
  security-events: write # Necessário para CodeQL

jobs:
  # ============================================================================
  # 🔍 JOB 1: VALIDATION & BUILD
  # ============================================================================
  validate-and-build:
    name: "🔍 Validate & Build"
    runs-on: ubuntu-latest
    timeout-minutes: 15
    outputs:
      has_keyvault: ${{ steps.check_secrets.outputs.has_keyvault }}
      has_azure_creds: ${{ steps.check_secrets.outputs.has_azure_creds }}
      image_tag: ${{ steps.meta.outputs.tags }}
      image_digest: ${{ steps.build.outputs.digest }}
    
    steps:
      - name: "📥 Checkout Repository"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for better analysis
          
      - name: "☕ Setup Java ${{ env.JAVA_VERSION }}"
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'corretto'
          cache: maven
          
      - name: "🔧 Setup Maven"
        run: |
          echo "📋 Maven version:"
          mvn --version
          echo "🔧 Configuring Maven settings..."
          mkdir -p ~/.m2
          
      - name: "🔍 Validate Project Structure"
        run: |
          echo "📁 Validating project structure..."
          required_files=("pom.xml" "Dockerfile" "docker-compose.yml" "src/main/resources/application.yml")
          for file in "${required_files[@]}"; do
            if [[ -f "$file" ]]; then
              echo "✅ $file exists"
            else
              echo "❌ $file is missing"
              exit 1
            fi
          done
          
      - name: "🔨 Maven Compile & Test"
        run: |
          echo "🔨 Compiling project..."
          mvn clean compile -B -q
          echo "🧪 Running tests..."
          mvn test -B -q
          echo "📦 Packaging application..."
          mvn package -DskipTests -B -q
          
      - name: "🐳 Validate Docker Configuration"
        run: |
          echo "🐳 Validating Dockerfile..."
          docker build --dry-run .
          echo "🐳 Validating docker-compose.yml..."
          docker compose -f docker-compose.yml config -q
          echo "✅ Docker configuration is valid"
          
      - name: "🔒 Security Validation"
        run: |
          echo "🔒 Checking for security issues..."
          # Check for hardcoded secrets
          if grep -r -i "password\s*[:=]\s*['\"][^$]" . --exclude-dir=.git --exclude-dir=target --exclude="*.backup*"; then
            echo "❌ Potential hardcoded passwords found"
            exit 1
          fi
          # Check for TODO/FIXME in critical files
          if grep -r "TODO\|FIXME" src/main/java/ | grep -i "security\|password\|secret"; then
            echo "⚠️ Security-related TODOs found - review required"
          fi
          echo "✅ Basic security validation passed"
          
      - name: "🔍 Check Azure Secrets Availability"
        id: check_secrets
        run: |
          if [[ -n "${{ secrets.AZURE_CLIENT_ID }}" ]] && [[ -n "${{ secrets.AZURE_TENANT_ID }}" ]]; then
            echo "has_azure_creds=true" >> "$GITHUB_OUTPUT"
            echo "✅ Azure credentials available"
          else
            echo "has_azure_creds=false" >> "$GITHUB_OUTPUT"
            echo "⚠️ Azure credentials not available"
          fi
          
          if [[ -n "${{ secrets.AZURE_KEYVAULT_URL }}" ]]; then
            echo "has_keyvault=true" >> "$GITHUB_OUTPUT"
            echo "✅ Key Vault configuration available"
          else
            echo "has_keyvault=false" >> "$GITHUB_OUTPUT"
            echo "⚠️ Key Vault not configured"
          fi

  # ============================================================================
  # 🛡️ JOB 2: SECURITY SCANNING
  # ============================================================================
  security-scan:
    name: "🛡️ Security Scan"
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: validate-and-build
    if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository
    
    steps:
      - name: "📥 Checkout Repository"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: "☕ Setup Java ${{ env.JAVA_VERSION }}"
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'corretto'
          cache: maven
          
      - name: "🔍 Initialize CodeQL"
        uses: github/codeql-action/init@v3
        with:
          languages: java
          queries: security-and-quality
          
      - name: "🔨 Build for CodeQL"
        run: mvn clean compile -B -q
        
      - name: "🔍 Perform CodeQL Analysis"
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:java"
          
      - name: "🔍 Run Dependency Check"
        run: |
          echo "🔍 Checking for vulnerable dependencies..."
          mvn org.owasp:dependency-check-maven:check -B -q || true
          if [[ -f "target/dependency-check-report.html" ]]; then
            echo "📋 Dependency check report generated"
          fi

  # ============================================================================
  # 🐳 JOB 3: BUILD & PUSH DOCKER IMAGE
  # ============================================================================
  build-and-push:
    name: "🐳 Build & Push Image"
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [validate-and-build, security-scan]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: "📥 Checkout Repository"
        uses: actions/checkout@v4
        
      - name: "🐳 Set up Docker Buildx"
        uses: docker/setup-buildx-action@v3
        
      - name: "🔐 Login to Container Registry"
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: "🏷️ Extract Metadata"
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            
      - name: "🔨 Build and Push Docker Image"
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: true
          sbom: true
          build-args: |
            SERVICE_NAME=${{ env.SERVICE_NAME }}
            BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            VCS_REF=${{ github.sha }}
            VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}

  # ============================================================================
  # 🚀 JOB 4: DEPLOY TO SELF-HOSTED
  # ============================================================================
  deploy-selfhosted:
    name: "🚀 Deploy to Self-Hosted"
    runs-on: [self-hosted, Linux, X64, conexao-de-sorte-backend-scheduler]
    timeout-minutes: 15
    needs: [validate-and-build, build-and-push]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - name: "📥 Checkout Repository"
        uses: actions/checkout@v4
        with:
          clean: true
          fetch-depth: 1
          
      - name: "🔐 Azure Login (OIDC)"
        if: needs.validate-and-build.outputs.has_azure_creds == 'true'
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          
      - name: "🔑 Load Azure Key Vault Secrets"
        if: needs.validate-and-build.outputs.has_keyvault == 'true'
        uses: azure/get-keyvault-secrets@v1
        with:
          keyvault: ${{ secrets.AZURE_KEYVAULT_NAME }}
          secrets: |
            conexao-de-sorte-database-r2dbc-url
            conexao-de-sorte-database-username
            conexao-de-sorte-database-password
            conexao-de-sorte-redis-host
            conexao-de-sorte-redis-port
            conexao-de-sorte-redis-password
            conexao-de-sorte-jwt-secret
            conexao-de-sorte-jwt-issuer
        id: keyvault
        
      - name: "🚀 Deploy Stack"
        run: |
          echo "🚀 Starting deployment for ${{ env.SERVICE_NAME }}..."
          
          # Set environment variables from Key Vault
          if [[ "${{ needs.validate-and-build.outputs.has_keyvault }}" == "true" ]]; then
            export CONEXAO_DE_SORTE_DATABASE_R2DBC_URL="${{ steps.keyvault.outputs.conexao-de-sorte-database-r2dbc-url }}"
            export CONEXAO_DE_SORTE_DATABASE_USERNAME="${{ steps.keyvault.outputs.conexao-de-sorte-database-username }}"
            export CONEXAO_DE_SORTE_DATABASE_PASSWORD="${{ steps.keyvault.outputs.conexao-de-sorte-database-password }}"
            export CONEXAO_DE_SORTE_REDIS_HOST="${{ steps.keyvault.outputs.conexao-de-sorte-redis-host }}"
            export CONEXAO_DE_SORTE_REDIS_PORT="${{ steps.keyvault.outputs.conexao-de-sorte-redis-port }}"
            export CONEXAO_DE_SORTE_REDIS_PASSWORD="${{ steps.keyvault.outputs.conexao-de-sorte-redis-password }}"
            export CONEXAO_DE_SORTE_JWT_SECRET="${{ steps.keyvault.outputs.conexao-de-sorte-jwt-secret }}"
            export CONEXAO_DE_SORTE_JWT_ISSUER="${{ steps.keyvault.outputs.conexao-de-sorte-jwt-issuer }}"
          fi
          
          # Configure deployment
          export COMPOSE_PROJECT_NAME="${{ env.STACK_NAME }}"
          export IMAGE_TAG="latest"
          
          # Pull latest image
          echo "📥 Pulling latest image..."
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest || echo "⚠️ Pull failed, will use local build"
          
          # Deploy using Docker Stack
          echo "🔄 Deploying stack..."
          docker stack deploy -c docker-compose.yml "${{ env.STACK_NAME }}"
          
          echo "✅ Deployment completed successfully"
          
      - name: "🏥 Health Check"
        run: |
          echo "🏥 Performing health check..."
          sleep 30  # Wait for service to start
          
          # Check service status
          echo "📊 Service status:"
          docker stack services "${{ env.STACK_NAME }}" || true
          
          # Try to reach health endpoint
          for i in {1..5}; do
            if curl -f -s "http://localhost:8088/actuator/health" > /dev/null; then
              echo "✅ Health check passed"
              exit 0
            fi
            echo "⏳ Attempt $i/5 failed, waiting..."
            sleep 10
          done
          
          echo "⚠️ Health check failed, but deployment may still be starting"
          echo "📋 Check logs: docker service logs ${{ env.STACK_NAME }}_${{ env.SERVICE_NAME }}"

  # ============================================================================
  # 📊 JOB 5: POST-DEPLOYMENT MONITORING
  # ============================================================================
  post-deployment:
    name: "📊 Post-Deployment"
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: deploy-selfhosted
    if: always() && needs.deploy-selfhosted.result != 'cancelled'
    
    steps:
      - name: "📊 Deployment Summary"
        run: |
          echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Service**: ${{ env.SERVICE_NAME }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Stack**: ${{ env.STACK_NAME }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: ${{ needs.deploy-selfhosted.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.deploy-selfhosted.result }}" == "success" ]]; then
            echo "✅ Deployment completed successfully" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Deployment failed or was skipped" >> $GITHUB_STEP_SUMMARY
          fi
