#!/bin/bash

# ============================================================================
# üõ°Ô∏è SECURITY ANALYSIS SCANNER
# ============================================================================
# 
# Script reutiliz√°vel para an√°lise de seguran√ßa em microservi√ßos
# Avalia configura√ß√µes de seguran√ßa e gera score
#
# Uso: ./security-analysis.sh [PROJECT_TYPE] [MIN_SCORE]
#
# Par√¢metros:
#   PROJECT_TYPE - Tipo do projeto (gateway, microservice, infrastructure)
#   MIN_SCORE    - Score m√≠nimo aceit√°vel (default: 4)
#
# Retorna: 0 se score >= MIN_SCORE, 1 caso contr√°rio
# ============================================================================

set -uo pipefail
# Temporariamente desabilitado -e para debug
# set -euo pipefail

# ============================================================================
# CONFIGURA√á√ïES
# ============================================================================

PROJECT_TYPE="${1:-microservice}"
MIN_SCORE="${2:-4}"
SERVICE_NAME="${3:-$(basename "$(pwd)")}"

echo "üõ°Ô∏è Iniciando an√°lise de seguran√ßa para $SERVICE_NAME ($PROJECT_TYPE)"
echo "üéØ Score m√≠nimo requerido: $MIN_SCORE"
echo ""

# ============================================================================
# FUN√á√ïES DE AN√ÅLISE DE SEGURAN√áA
# ============================================================================

check_ssl_configuration() {
    echo "üîê Verificando configura√ß√£o SSL/HTTPS..."
    
    if grep -riq "ssl.*enabled.*true\|server.*port.*443\|keystore\|truststore" src/main/resources/application*.yml 2>/dev/null; then
        echo "‚úÖ SSL/HTTPS configurado"
        return 0
    else
        echo "‚ö†Ô∏è  SSL/HTTPS n√£o encontrado ou n√£o habilitado"
        return 1
    fi
}

check_jwt_security() {
    echo "üé´ Verificando configura√ß√£o JWT..."
    
    if grep -riq "jwt" src/main/resources/application*.yml 2>/dev/null; then
        echo "‚úÖ JWT Security configurado"
        return 0
    else
        echo "‚ö†Ô∏è  JWT Security n√£o encontrado"
        return 1
    fi
}

check_cors_configuration() {
    echo "üåê Verificando configura√ß√£o CORS..."
    
    if grep -riq "cors" src/main/resources/application*.yml 2>/dev/null; then
        echo "‚úÖ CORS configurado"
        return 0
    else
        echo "‚ö†Ô∏è  CORS n√£o configurado"
        return 1
    fi
}

check_rate_limiting() {
    echo "üö¶ Verificando Rate Limiting..."
    
    if grep -riq "rate.*limit\|throttle\|bucket\|replenish" src/main/resources/application*.yml 2>/dev/null; then
        echo "‚úÖ Rate Limiting configurado"
        return 0
    else
        echo "‚ö†Ô∏è  Rate Limiting n√£o encontrado"
        return 1
    fi
}

check_actuator_security() {
    echo "üìä Verificando seguran√ßa do Actuator..."
    
    if grep -riq "management" src/main/resources/application*.yml 2>/dev/null; then
        echo "‚úÖ Actuator security configurado"
        return 0
    else
        echo "‚ö†Ô∏è  Actuator security n√£o configurado"
        return 1
    fi
}

check_logging_security() {
    echo "üìù Verificando configura√ß√£o de logging seguro..."
    
    if grep -riq "logging" src/main/resources/application*.yml 2>/dev/null; then
        echo "‚úÖ Logging configurado"
        return 0
    else
        echo "‚ö†Ô∏è  Logging n√£o configurado"
        return 1
    fi
}

check_database_security() {
    echo "üóÑÔ∏è  Verificando seguran√ßa de banco de dados..."
    
    if grep -riq "database\|r2dbc\|jdbc" src/main/resources/application*.yml 2>/dev/null; then
        echo "‚úÖ Configura√ß√£o de banco encontrada"
        return 0
    else
        echo "‚ö†Ô∏è  Configura√ß√£o de banco n√£o encontrada"
        return 1
    fi
}

check_docker_security() {
    echo "üê≥ Verificando seguran√ßa do Docker..."
    
    if [[ -f "Dockerfile" ]]; then
        echo "‚úÖ Dockerfile encontrado"
        return 0
    else
        echo "‚ö†Ô∏è  Dockerfile n√£o encontrado"
        return 1
    fi
}

# ============================================================================
# EXECU√á√ÉO DA AN√ÅLISE
# ============================================================================

echo "============================================================================"
echo "üõ°Ô∏è AN√ÅLISE DE SEGURAN√áA - $SERVICE_NAME"
echo "============================================================================"

SCORE=0
CHECKS_PERFORMED=0

# Lista de verifica√ß√µes baseada no tipo de projeto
case "$PROJECT_TYPE" in
    "gateway")
        echo "üö™ An√°lise espec√≠fica para este perfil de servi√ßo:"
        
        if check_ssl_configuration; then
            ((SCORE++))
            echo "  ‚úÖ SSL check passed"
        else
            echo "  ‚ö†Ô∏è SSL check failed"
        fi
        ((CHECKS_PERFORMED++))
        
        if check_jwt_security; then
            ((SCORE++))
            echo "  ‚úÖ JWT check passed"
        else
            echo "  ‚ö†Ô∏è JWT check failed"
        fi
        ((CHECKS_PERFORMED++))
        
        if check_cors_configuration; then
            ((SCORE++))
            echo "  ‚úÖ CORS check passed"
        else
            echo "  ‚ö†Ô∏è CORS check failed"
        fi
        ((CHECKS_PERFORMED++))
        
        if check_rate_limiting; then
            ((SCORE++))
            echo "  ‚úÖ Rate limiting check passed"
        else
            echo "  ‚ö†Ô∏è Rate limiting check failed"
        fi
        ((CHECKS_PERFORMED++))
        
        if check_actuator_security; then
            ((SCORE++))
            echo "  ‚úÖ Actuator check passed"
        else
            echo "  ‚ö†Ô∏è Actuator check failed"
        fi
        ((CHECKS_PERFORMED++))
        
        if check_logging_security; then
            ((SCORE++))
            echo "  ‚úÖ Logging check passed"
        else
            echo "  ‚ö†Ô∏è Logging check failed"
        fi
        ((CHECKS_PERFORMED++))
        
        if check_database_security; then
            ((SCORE++))
            echo "  ‚úÖ Database check passed"
        else
            echo "  ‚ö†Ô∏è Database check failed"
        fi
        ((CHECKS_PERFORMED++))
        
        if check_docker_security; then
            ((SCORE++))
            echo "  ‚úÖ Docker check passed"
        else
            echo "  ‚ö†Ô∏è Docker check failed"
        fi
        ((CHECKS_PERFORMED++))
        ;;
    "microservice")
        echo "üîß An√°lise para microservi√ßo:"
        
        check_jwt_security && ((SCORE++)) || true; ((CHECKS_PERFORMED++))
        check_actuator_security && ((SCORE++)) || true; ((CHECKS_PERFORMED++))
        check_logging_security && ((SCORE++)) || true; ((CHECKS_PERFORMED++))
        check_database_security && ((SCORE++)) || true; ((CHECKS_PERFORMED++))
        check_docker_security && ((SCORE++)) || true; ((CHECKS_PERFORMED++))
        ;;
    *)
        echo "üèóÔ∏è An√°lise b√°sica para infraestrutura:"
        
        check_docker_security && ((SCORE++)) || true; ((CHECKS_PERFORMED++))
        ;;
esac

# ============================================================================
# RELAT√ìRIO FINAL
# ============================================================================

echo ""
echo "============================================================================"
echo "üìä RESULTADO DA AN√ÅLISE DE SEGURAN√áA"
echo "============================================================================"
echo "üéØ Score obtido: $SCORE/$CHECKS_PERFORMED"

if [[ $CHECKS_PERFORMED -gt 0 ]]; then
    echo "üìä Percentual: $(( (SCORE * 100) / CHECKS_PERFORMED ))%"
else
    echo "üìä Percentual: 0% (nenhuma verifica√ß√£o executada)"
fi

echo "üéØ Score m√≠nimo: $MIN_SCORE"

if [[ $SCORE -ge $MIN_SCORE ]]; then
    echo "‚úÖ APROVADO: Score de seguran√ßa adequado ($SCORE/$CHECKS_PERFORMED)"
    echo "üõ°Ô∏è Projeto $SERVICE_NAME atende aos requisitos de seguran√ßa"
    exit 0
else
    echo "‚ùå REPROVADO: Score de seguran√ßa insuficiente ($SCORE/$CHECKS_PERFORMED)"
    echo "üö® Projeto $SERVICE_NAME precisa de melhorias de seguran√ßa"
    echo ""
    echo "üí° Recomenda√ß√µes:"
    echo "   - Revisar configura√ß√µes de seguran√ßa nos arquivos application*.yml"
    echo "   - Implementar as configura√ß√µes ausentes identificadas acima"
    echo "   - Executar novamente ap√≥s corre√ß√µes"
    exit 1
fi