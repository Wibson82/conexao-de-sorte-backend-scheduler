# ============================================================================
# üê≥ DOCKERFILE TEMPLATE PADRONIZADO - MICROSSERVI√áOS CONEX√ÉO DE SORTE
# ============================================================================
# Template otimizado para todos os microsservi√ßos backend com:
# - Multi-stage build para reduzir tamanho da imagem
# - Java 25 LTS com Amazon Corretto
# - Usu√°rio n√£o-root para seguran√ßa
# - Health check nativo
# - Cache otimizado para Maven
# - Suporte a debug remoto
# - Configura√ß√µes de JVM otimizadas para containers
# - Timezone configurado para Am√©rica/S√£o Paulo
# - Logs estruturados
# ============================================================================

# === ARGUMENTOS DE BUILD ===
ARG JAVA_VERSION=25
ARG ALPINE_VERSION=3.22
ARG MAVEN_VERSION=3.9.11
ARG SERVICE_NAME=scheduler
ARG SERVICE_PORT=8088
ARG DEBUG_PORT=5005

# === EST√ÅGIO 1: BUILD ===
FROM maven:${MAVEN_VERSION}-amazoncorretto-${JAVA_VERSION}-alpine AS builder

# Metadados da imagem
LABEL maintainer="Conex√£o de Sorte <tech@conexaodesorte.com>"
LABEL description="Microsservi√ßo scheduler - Build Stage"
LABEL version="1.0.0"

# Vari√°veis de build
ARG BUILD_DATE
ARG VCS_REF
ARG VERSION=1.0.0

# Definir diret√≥rio de trabalho
WORKDIR /build

# Instalar depend√™ncias de build
RUN apk add --no-cache \
    curl \
    bash \
    && rm -rf /var/cache/apk/*

# Copiar arquivos de configura√ß√£o Maven (cache layer)
COPY pom.xml .
COPY .mvn/ .mvn/
COPY mvnw .

# Download de depend√™ncias (layer cache√°vel)
RUN --mount=type=cache,target=/root/.m2 \
    mvn dependency:go-offline -B

# Copiar c√≥digo fonte
COPY src/ src/

# Build da aplica√ß√£o com otimiza√ß√µes
RUN --mount=type=cache,target=/root/.m2 \
    mvn clean package -DskipTests -B \
    -Dspring-boot.build-image.pullPolicy=IF_NOT_PRESENT \
    -Dmaven.compiler.debug=false \
    -Dmaven.compiler.optimize=true

# === EST√ÅGIO 2: RUNTIME ===
FROM amazoncorretto:${JAVA_VERSION}-alpine${ALPINE_VERSION} AS runtime

# Build metadata args (redeclared in this stage)
ARG BUILD_DATE
ARG VCS_REF
ARG VERSION=1.0.0
ARG SERVICE_NAME
ARG SERVICE_PORT
ARG DEBUG_PORT

# Instalar depend√™ncias do sistema
RUN apk add --no-cache \
    tzdata \
    curl \
    dumb-init \
    netcat-openbsd \
    && rm -rf /var/cache/apk/*

# Configurar timezone
ENV TZ=America/Sao_Paulo
RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone

# Criar usu√°rio n√£o-root para seguran√ßa
RUN addgroup -g 1001 -S appgroup && \
    adduser -u 1001 -S appuser -G appgroup

# Definir diret√≥rio da aplica√ß√£o
WORKDIR /app

# Criar diret√≥rios necess√°rios com permiss√µes corretas
RUN mkdir -p /app/logs /app/config /app/secrets && \
    chown -R appuser:appgroup /app && \
    chmod -R 755 /app

# Copiar JAR da aplica√ß√£o do est√°gio de build
COPY --from=builder --chown=appuser:appgroup /build/target/*.jar app.jar

# Criar script de entrada padronizado
RUN printf '%s\n' \
    '#!/bin/sh' \
    'set -e' \
    '' \
    'echo "üöÄ Iniciando microsservi√ßo scheduler..."' \
    'echo "üìÖ Data: $(date)"' \
    'echo "üè∑Ô∏è  Vers√£o: ${VERSION}"' \
    'echo "üîß Perfil: ${SPRING_PROFILES_ACTIVE:-prod}"' \
    'echo "üåê Porta: ${SERVER_PORT:-8088}"' \
    '' \
    '# Aguardar depend√™ncias se necess√°rio' \
    'if [ -n "$WAIT_FOR_SERVICES" ]; then' \
    '    echo "‚è≥ Aguardando servi√ßos: $WAIT_FOR_SERVICES"' \
    '    for service in $WAIT_FOR_SERVICES; do' \
    '        host=$(echo $service | cut -d: -f1)' \
    '        port=$(echo $service | cut -d: -f2)' \
    '        echo "üîç Verificando $host:$port..."' \
    '        while ! nc -z $host $port; do' \
    '            echo "‚è≥ Aguardando $host:$port..."' \
    '            sleep 2' \
    '        done' \
    '        echo "‚úÖ $host:$port est√° dispon√≠vel"' \
    '    done' \
    'fi' \
    '' \
    '# Iniciar aplica√ß√£o' \
    'echo "‚òï Iniciando aplica√ß√£o Java..."' \
    'exec dumb-init -- java $JAVA_OPTS -jar /app/app.jar "$@"' \
    > /app/docker-entrypoint.sh && \
    chmod +x /app/docker-entrypoint.sh && \
    chown appuser:appgroup /app/docker-entrypoint.sh

# Mudar para usu√°rio n√£o-root
USER appuser:appgroup

# Configura√ß√µes de JVM otimizadas para containers
ENV JAVA_OPTS="\
    -XX:+UseContainerSupport \
    -XX:MaxRAMPercentage=75.0 \
    -XX:+UseG1GC \
    -XX:MaxGCPauseMillis=200 \
    -XX:+ExitOnOutOfMemoryError \
    -XX:+HeapDumpOnOutOfMemoryError \
    -XX:HeapDumpPath=/app/logs/ \
    -Djava.security.egd=file:/dev/./urandom \
    -Dspring.backgroundpreinitializer.ignore=true"

# Vari√°veis de ambiente padr√£o
ENV SPRING_PROFILES_ACTIVE=prod
ENV SERVER_PORT=8088
ENV MANAGEMENT_SERVER_PORT=8081
ENV LOG_FILE=/app/logs/application.log

# Health check nativo
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:${MANAGEMENT_SERVER_PORT}/actuator/health || exit 1

# Expor portas
EXPOSE 8088 ${MANAGEMENT_SERVER_PORT}

# Labels OCI (Open Container Initiative)
LABEL org.opencontainers.image.title="Conex√£o de Sorte - scheduler"
LABEL org.opencontainers.image.description="Microsservi√ßo scheduler"
LABEL org.opencontainers.image.vendor="Conex√£o de Sorte"
LABEL org.opencontainers.image.authors="tech@conexaodesorte.com"
LABEL org.opencontainers.image.licenses="Proprietary"
LABEL org.opencontainers.image.created="${BUILD_DATE}"
LABEL org.opencontainers.image.revision="${VCS_REF}"
LABEL org.opencontainers.image.version="${VERSION}"
LABEL org.opencontainers.image.url="https://conexaodesorte.com"
LABEL org.opencontainers.image.documentation="https://docs.conexaodesorte.com"

# Comando de inicializa√ß√£o
ENTRYPOINT ["/app/docker-entrypoint.sh"]
CMD []

# === EST√ÅGIO 3: DEBUG (Opcional) ===
FROM runtime AS debug

# Configurar debug remoto
ENV JAVA_OPTS="$JAVA_OPTS \
    -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:${DEBUG_PORT} \
    -Dspring.profiles.active=dev \
    -Dlogging.level.br.tec.facilitaservicos=DEBUG"

# Expor porta de debug
EXPOSE ${DEBUG_PORT}

# Comando para debug
ENTRYPOINT ["/app/docker-entrypoint.sh"]
CMD ["--debug"]

# === EST√ÅGIO FINAL: RELEASE (Padr√£o) ===
FROM runtime AS release
ENTRYPOINT ["/app/docker-entrypoint.sh"]
CMD []
