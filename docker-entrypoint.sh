#!/bin/bash
# ============================================================================
# üê≥ DOCKER ENTRYPOINT - SCHEDULER MICROSERVICE
# ============================================================================
#
# Script de inicializa√ß√£o personalizado para Scheduler Backend
# Contexto: Agendador de tarefas cr√≠ticas (Jobs cron)
# - Valida√ß√µes espec√≠ficas para jobs agendados
# - Health checks para schedulers
# - Retry logic validation
# - Cron job monitoring
# - Job execution tracking
# - Error handling e recovery
# - Performance monitoring para jobs
# - Resource allocation validation
#
# Uso: Configurar no Dockerfile como ENTRYPOINT
# ============================================================================

set -euo pipefail

# ============================================================================
# üìã CONFIGURA√á√ÉO ESPEC√çFICA DO SCHEDULER
# ============================================================================

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# Fun√ß√£o de log
log() {
    echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')] [SCHEDULER]${NC} $1"
}

error() {
    echo -e "${RED}[$(date +'%Y-%m-%d %H:%M:%S')] [SCHEDULER] ERROR:${NC} $1" >&2
}

success() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] [SCHEDULER] SUCCESS:${NC} $1"
}

warning() {
    echo -e "${YELLOW}[$(date +'%Y-%m-%d %H:%M:%S')] [SCHEDULER] WARNING:${NC} $1"
}

# ============================================================================
# üîß VALIDA√á√ÉO DE AMBIENTE - SCHEDULER ESPEC√çFICO
# ============================================================================

log "üöÄ Iniciando valida√ß√£o de ambiente - Scheduler Microservice..."

# Verificar se estamos rodando como usu√°rio correto
if [[ "$(id -u)" -eq 0 ]]; then
    warning "Executando como root - isso pode ser inseguro em produ√ß√£o"
fi

# Vari√°veis obrigat√≥rias espec√≠ficas do Scheduler
required_vars=(
    "CONEXAO_DE_SORTE_DATABASE_R2DBC_URL"
    "CONEXAO_DE_SORTE_DATABASE_USERNAME"
    "CONEXAO_DE_SORTE_DATABASE_PASSWORD"
    "CONEXAO_DE_SORTE_REDIS_HOST"
    "CONEXAO_DE_SORTE_REDIS_PORT"
    "CONEXAO_DE_SORTE_REDIS_PASSWORD"
    "CONEXAO_DE_SORTE_SERVER_PORT"
    "CONEXAO_DE_SORTE_JWT_ISSUER"
)

missing_vars=()
for var in "${required_vars[@]}"; do
    if [[ -z "${!var:-}" ]]; then
        missing_vars+=("$var")
    fi
done

if [[ ${#missing_vars[@]} -gt 0 ]]; then
    error "Vari√°veis de ambiente obrigat√≥rias n√£o definidas para Scheduler:"
    for var in "${missing_vars[@]}"; do
        error "  - $var"
    fi
    exit 1
fi

# Valida√ß√µes espec√≠ficas do Scheduler
if [[ "$CONEXAO_DE_SORTE_SERVER_PORT" != "8084" ]]; then
    warning "Porta do Scheduler diferente do padr√£o: $CONEXAO_DE_SORTE_SERVER_PORT (esperado: 8084)"
fi

# Validar se n√£o est√° usando H2 em produ√ß√£o
if [[ "${SPRING_PROFILES_ACTIVE:-}" == "prod" ]]; then
    if [[ "${CONEXAO_DE_SORTE_DATABASE_R2DBC_URL:-}" =~ r2dbc:h2 ]]; then
        error "‚ùå H2 database detectado em ambiente de produ√ß√£o - viola√ß√£o de seguran√ßa"
        exit 1
    fi
    success "‚úÖ Valida√ß√£o de seguran√ßa: H2 n√£o detectado em produ√ß√£o"
fi

success "‚úÖ Valida√ß√£o de ambiente conclu√≠da - Scheduler"

# ============================================================================
# ‚è∞ VALIDA√á√ÉO DE SCHEDULER SPECIFIC - JOBS
# ============================================================================

log "‚è∞ Executando valida√ß√µes espec√≠ficas do Scheduler..."

# Verificar se h√° configura√ß√£o de cron jobs
if [[ -d "/app/cron" ]] || [[ -f "/app/cron/jobs" ]]; then
    success "‚úÖ Diret√≥rio de cron jobs encontrado"
else
    warning "‚ö†Ô∏è Nenhum diret√≥rio de cron jobs encontrado"
fi

# Verificar se h√° configura√ß√£o de retry
if [[ -n "${SCHEDULER_MAX_RETRY:-}" ]]; then
    log "‚ÑπÔ∏è Configura√ß√£o de retry detectada: $SCHEDULER_MAX_RETRY tentativas"
fi

# Verificar se h√° configura√ß√£o de job timeout
if [[ -n "${SCHEDULER_JOB_TIMEOUT:-}" ]]; then
    log "‚ÑπÔ∏è Configura√ß√£o de timeout detectada: $SCHEDULER_JOB_TIMEOUT"
fi

# Validar configura√ß√£o de thread pool
if [[ -n "${SCHEDULER_THREAD_POOL_SIZE:-}" ]]; then
    log "‚ÑπÔ∏è Configura√ß√£o de thread pool detectada: $SCHEDULER_THREAD_POOL_SIZE"
fi

# ============================================================================
# üóÑÔ∏è VALIDA√á√ÉO DE CONECTIVIDADE - DATABASE
# ============================================================================

log "üîç Validando conectividade com database..."

max_attempts=30
attempt=1

while [[ $attempt -le $max_attempts ]]; do
    # Usar netcat para verificar conectividade
    if nc -z "$CONEXAO_DE_SORTE_DATABASE_HOST" "$CONEXAO_DE_SORTE_DATABASE_PORT" 2>/dev/null; then
        success "‚úÖ Database est√° acess√≠vel"
        break
    fi

    if [[ $attempt -eq $max_attempts ]]; then
        error "‚ùå Database n√£o ficou dispon√≠vel ap√≥s $max_attempts tentativas"
        exit 1
    fi

    log "‚è≥ Aguardando database... (tentativa $attempt/$max_attempts)"
    sleep 2
    ((attempt++))
done

# ============================================================================
# üî¥ VALIDA√á√ÉO DE CONECTIVIDADE - REDIS
# ============================================================================

log "üîç Validando conectividade com Redis..."

max_attempts=30
attempt=1

while [[ $attempt -le $max_attempts ]]; do
    if nc -z "$CONEXAO_DE_SORTE_REDIS_HOST" "$CONEXAO_DE_SORTE_REDIS_PORT" 2>/dev/null; then
        success "‚úÖ Redis est√° acess√≠vel"
        break
    fi

    if [[ $attempt -eq $max_attempts ]]; then
        error "‚ùå Redis n√£o ficou dispon√≠vel ap√≥s $max_attempts tentativas"
        exit 1
    fi

    log "‚è≥ Aguardando Redis... (tentativa $attempt/$max_attempts)"
    sleep 2
    ((attempt++))
done

# ============================================================================
# üê∞ VALIDA√á√ÉO DE CONECTIVIDADE - RABBITMQ (OPCIONAL)
# ============================================================================

if [[ -n "${CONEXAO_DE_SORTE_RABBITMQ_HOST:-}" ]] && [[ -n "${CONEXAO_DE_SORTE_RABBITMQ_PORT:-}" ]]; then
    log "üîç Validando conectividade com RabbitMQ..."

    max_attempts=15
    attempt=1

    while [[ $attempt -le $max_attempts ]]; do
        if nc -z "$CONEXAO_DE_SORTE_RABBITMQ_HOST" "$CONEXAO_DE_SORTE_RABBITMQ_PORT" 2>/dev/null; then
            success "‚úÖ RabbitMQ est√° acess√≠vel"
            break
        fi

        if [[ $attempt -eq $max_attempts ]]; then
            warning "‚ö†Ô∏è RabbitMQ n√£o ficou dispon√≠vel ap√≥s $max_attempts tentativas - continuando sem message queue"
            break
        fi

        log "‚è≥ Aguardando RabbitMQ... (tentativa $attempt/$max_attempts)"
        sleep 2
        ((attempt++))
    done
else
    log "‚ÑπÔ∏è RabbitMQ n√£o configurado - operando sem message queue"
fi

# ============================================================================
# ‚öôÔ∏è VALIDA√á√ÉO DE SCHEDULER HEALTH
# ============================================================================

log "‚è∞ Validando health checks do Scheduler..."

# Verificar se h√° configura√ß√£o de health endpoint
if [[ -n "${MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE:-}" ]]; then
    if [[ "$MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE" == *"health"* ]]; then
        success "‚úÖ Health endpoint configurado"
    fi
fi

# Verificar se h√° configura√ß√£o de metrics
if [[ -n "${MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE:-}" ]]; then
    if [[ "$MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE" == *"metrics"* ]]; then
        log "‚ÑπÔ∏è Metrics endpoint configurado"
    fi
fi

# Validar configura√ß√£o de job recovery
if [[ -n "${SCHEDULER_RECOVERY_ENABLED:-}" ]]; then
    if [[ "$SCHEDULER_RECOVERY_ENABLED" == "true" ]]; then
        success "‚úÖ Job recovery habilitado"
    fi
fi

# ============================================================================
# üìä VALIDA√á√ÉO DE PERFORMANCE
# ============================================================================

log "üìä Validando configura√ß√µes de performance..."

# Verificar se h√° configura√ß√£o de memory limits
if [[ -n "${SCHEDULER_MEMORY_LIMIT:-}" ]]; then
    log "‚ÑπÔ∏è Memory limit configurado: $SCHEDULER_MEMORY_LIMIT"
fi

# Verificar se h√° configura√ß√£o de CPU limits
if [[ -n "${SCHEDULER_CPU_LIMIT:-}" ]]; then
    log "‚ÑπÔ∏è CPU limit configurado: $SCHEDULER_CPU_LIMIT"
fi

# Validar configura√ß√£o de job batch size
if [[ -n "${SCHEDULER_BATCH_SIZE:-}" ]]; then
    log "‚ÑπÔ∏è Batch size configurado: $SCHEDULER_BATCH_SIZE"
fi

# ============================================================================
# üìã INFORMA√á√ïES DO AMBIENTE - SCHEDULER
# ============================================================================

log "üìã Informa√ß√µes do ambiente - Scheduler Microservice:"
echo "  - Service: Conex√£o de Sorte - Scheduler Microservice"
echo "  - Profile: ${SPRING_PROFILES_ACTIVE:-default}"
echo "  - Server Port: $CONEXAO_DE_SORTE_SERVER_PORT (Padr√£o: 8084)"
echo "  - Database: $CONEXAO_DE_SORTE_DATABASE_HOST:$CONEXAO_DE_SORTE_DATABASE_PORT"
echo "  - Redis: $CONEXAO_DE_SORTE_REDIS_HOST:$CONEXAO_DE_SORTE_REDIS_PORT"
echo "  - RabbitMQ: ${CONEXAO_DE_SORTE_RABBITMQ_HOST:-N√£o configurado}:${CONEXAO_DE_SORTE_RABBITMQ_PORT:-5672}"
echo "  - JWT Issuer: $CONEXAO_DE_SORTE_JWT_ISSUER"
echo "  - Max Retry: ${SCHEDULER_MAX_RETRY:-N√£o configurado}"
echo "  - Job Timeout: ${SCHEDULER_JOB_TIMEOUT:-N√£o configurado}"
echo "  - Thread Pool: ${SCHEDULER_THREAD_POOL_SIZE:-N√£o configurado}"
echo "  - Recovery: ${SCHEDULER_RECOVERY_ENABLED:-N√£o configurado}"
echo "  - Health Endpoint: http://localhost:$CONEXAO_DE_SORTE_SERVER_PORT/actuator/health"

# ============================================================================
# üèÉ EXECU√á√ÉO DA APLICA√á√ÉO - SCHEDULER
# ============================================================================

log "üèÉ Iniciando Scheduler Microservice..."

# Executar aplica√ß√£o com exec para permitir signal handling
exec "$@"
