# ============================================================================
# üèóÔ∏è CONFIGURA√á√ÉO STAGING - MICROSERVI√áO SCHEDULER
# ============================================================================
# Perfil otimizado para ambiente de staging com observabilidade enhanced
# Mant√©m padr√µes de produ√ß√£o com flexibilidade para testes
# ============================================================================

# ========================================
# üåê SERVIDOR
# ========================================
server:
  port: ${STAGING_SERVER_PORT:8081}
  shutdown: graceful
  servlet:
    context-path: /rest/v1

# ========================================
# üóÑÔ∏è BANCO DE DADOS - R2DBC
# ========================================
spring:
  application:
    name: scheduler-staging
    
  r2dbc:
    url: ${STAGING_DATABASE_R2DBC_URL:r2dbc:mysql://localhost:3307/conexao_sorte_scheduler}
    username: ${STAGING_DATABASE_USERNAME:conexao_sorte}
    password: ${STAGING_DATABASE_PASSWORD}
    pool:
      enabled: true
      initial-size: 5
      max-size: 20
      max-idle-time: 30m
      
  # ========================================
  # üóÑÔ∏è FLYWAY PARA MIGRATIONS
  # ========================================
  flyway:
    enabled: true
    url: ${STAGING_DATABASE_FLYWAY_URL:jdbc:mysql://localhost:3307/conexao_sorte_scheduler}
    user: ${STAGING_DATABASE_USERNAME:conexao_sorte}
    password: ${STAGING_DATABASE_PASSWORD}
    locations: classpath:db/migration
    baseline-on-migrate: true
    
  # ========================================
  # üöÄ REDIS
  # ========================================
  data:
    redis:
      host: ${STAGING_REDIS_HOST:localhost}
      port: ${STAGING_REDIS_PORT:6380}
      password: ${STAGING_REDIS_PASSWORD}
      database: 2
      timeout: 2000ms
      lettuce:
        pool:
          enabled: true
          max-active: 8
          max-idle: 4
          min-idle: 1

# ========================================
# üìä ACTUATOR & OBSERVABILIDADE
# ========================================
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus,loggers,configprops,jwks
      cors:
        allowed-origins: "*"
        allowed-methods: GET,POST
  endpoint:
    health:
      show-details: always
      show-components: always
  health:
    redis:
      enabled: true
    db:
      enabled: true
  metrics:
    distribution:
      percentiles-histogram:
        http.server.requests: true
      percentiles:
        http.server.requests: 0.5,0.95,0.99
  prometheus:
    metrics:
      export:
        enabled: true
        step: 10s
  tracing:
    enabled: true
    sampling:
      probability: 1.0  # 100% em staging para debug completo

# ========================================
# üìù LOGGING ENHANCED
# ========================================
logging:
  level:
    root: INFO
    br.tec.facilitaservicos.autenticacao: DEBUG
    org.springframework.security: DEBUG
    org.springframework.r2dbc: INFO
    org.springframework.data.redis: DEBUG
    reactor.netty.http.server: INFO
    org.springframework.web.reactive: DEBUG
    org.springframework.security.oauth2: DEBUG
  pattern:
    console: "%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %clr(%5p) %clr(${PID:- }){magenta} %clr(---){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} [STAGING] %m%n%wEx"
    file: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - [STAGING] %msg%n"
  file:
    name: /tmp/autenticacao-staging.log
    max-size: 100MB
    max-history: 30

# ========================================
# üåê CORS PERMISSIVO PARA STAGING
# ========================================
cors:
  allowed-origins: 
    - "http://localhost:3000"
    - "https://staging.conexaodesorte.com"
  allowed-methods: "*"
  allowed-headers: "*"
  allow-credentials: true
  max-age: 3600

# ========================================
# üõ°Ô∏è RESILIENCE4J - CONFIGURA√á√ÉO STAGING
# ========================================
resilience4j:
  circuitbreaker:
    instances:
      user-service:
        register-health-indicator: true
        failure-rate-threshold: 30  # Mais permissivo em staging
        wait-duration-in-open-state: 30s
        sliding-window-size: 10
        minimum-number-of-calls: 5
  
  ratelimiter:
    instances:
      auth-api:
        register-health-indicator: true
        limit-for-period: 2000  # Mais permissivo para testes de auth
        limit-refresh-period: 1m
        timeout-duration: 500ms

# ========================================
# üîß CONFIGURA√á√ïES ESPEC√çFICAS DO MICROSERVI√áO
# ========================================
auth:
  jwt:
    secret: ${JWT_SECRET_STAGING:staging-super-secret-key-change-in-production}
    expiration: 3600  # 1 hora
    refresh-expiration: 86400  # 24 horas
    issuer: https://staging.conexaodesorte.com
    
  features:
    multi-factor: false  # Desabilitado em staging para facilitar testes
    social-login: true
    password-recovery: true
    email-verification: false  # Desabilitado em staging
    audit-logs: true
    
  cache:
    token-blacklist-ttl: 3600s
    user-session-ttl: 1800s
    
  api:
    rate-limit:
      enabled: true
      login-attempts: 100  # Mais permissivo em staging
      
  validation:
    strong-passwords: false  # Relaxado para staging
    account-lockout-enabled: false

# ========================================
# üì± INTEGRA√á√ÉO COM OUTROS MICROSERVI√áOS
# ========================================
services:
  user:
    url: http://user-service:8089
    timeout: 10s
  audit:
    url: http://audit-service:8085
    timeout: 5s
    
# ========================================
# üß™ DEBUG & DESENVOLVIMENTO
# ========================================
debug: true
        
springdoc:
  api-docs:
    enabled: true
  swagger-ui:
    enabled: true
    path: /swagger-ui.html
    operations-sorter: method
    tags-sorter: alpha