server:
  port: ${conexao-de-sorte-server-port:8095}}
  ssl:
    enabled: ${conexao-de-sorte-ssl-enabled:false}
    key-store: ${conexao-de-sorte-ssl-keystore-path:}
    key-store-password: ${conexao-de-sorte-ssl-keystore-password:}

spring:
  application:
    name: conexao-scheduler
  
  profiles:
    default: prod
    active: prod
  main:
    web-application-type: reactive
  codec:
    max-in-memory-size: 10MB
    
  # Config import para secrets via ConfigTree (Docker Secrets)
  config:
    import:
      - optional:configtree:/run/secrets/
      - optional:configtree:/etc/secrets/azure/
      - optional:configtree:/mnt/secrets/
      - optional:file:./secrets.properties
      
  # Azure Key Vault via Spring Cloud Azure
  cloud:
    azure:
      keyvault:
        secret:
          enabled: ${azure.keyvault.enabled:false}
          endpoint: ${AZURE_KEYVAULT_ENDPOINT:}
      profile:
        tenant-id: ${AZURE_TENANT_ID:}
        subscription-id: ${AZURE_SUBSCRIPTION_ID:}
        client-id: ${AZURE_CLIENT_ID:}

  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: ${conexao-de-sorte-jwt-issuer}
          jwk-set-uri: ${conexao-de-sorte-jwt-jwks-uri}
  r2dbc:
    # Preferencialmente usa -database-r2dbc-url; mantém compat com -database-url e define fallback seguro
    url: ${conexao-de-sorte-database-r2dbc-url:${conexao-de-sorte-database-url:r2dbc:mysql://mysql-proxy:6033/conexao_sorte_scheduler?useSSL=true&allowPublicKeyRetrieval=false}}
    username: ${conexao-de-sorte-database-username}
    password: ${conexao-de-sorte-database-password}
  jackson:
    serialization:
      WRITE_DATES_AS_TIMESTAMPS: false

# Habilitar/desabilitar integração manual com Azure Key Vault
azure.keyvault.enabled: false

management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
  metrics:
    tags:
      application: conexao-scheduler
  endpoint:
    health:
      show-details: when-authorized

cors:
  allow-credentials: ${conexao-de-sorte-cors-allow-credentials:true}
  allowed-origins: ${conexao-de-sorte-cors-allowed-origins:*}

scheduler:
  etl:
    loterias:
      enabled: true
      backoff-ms: 2000
      max-retries: 5
      modalidades:
        - megasena
        - quina
        - lotofacil
        - lotomania
        - duplasena
        - timemania
        - diadesorte
        - supersete
        - loteca
        - milionaria

# Resilience4j Configuration
resilience4j:
  circuitbreaker:
    instances:
      scheduler-etl:
        sliding-window-size: 100
        minimum-number-of-calls: 10
        failure-rate-threshold: 50
        wait-duration-in-open-state: 30s
        permitted-number-of-calls-in-half-open-state: 5
      loteria-extraction:
        sliding-window-size: 50
        minimum-number-of-calls: 5
        failure-rate-threshold: 60
        wait-duration-in-open-state: 20s
        permitted-number-of-calls-in-half-open-state: 3
  timelimiter:
    instances:
      loteria-extraction:
        timeout-duration: 30s
        cancel-running-future: true

logging:
  level:
    root: INFO
    org.springframework.web: INFO
    br.tec.facilitaservicos.scheduler: INFO
    io.github.resilience4j: DEBUG
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level [%X{jobId:-},%X{modalidade:-},%X{data:-}] %logger{36} - %msg%n"
