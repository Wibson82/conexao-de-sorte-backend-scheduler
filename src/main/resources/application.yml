server:
  port: ${SERVER_PORT:${conexao-de-sorte-server-port:8084}}
  ssl:
    enabled: ${SSL_ENABLED:${conexao-de-sorte-ssl-enabled:false}}
    key-store: ${SSL_KEYSTORE_PATH:${conexao-de-sorte-ssl-keystore-path:}}
    key-store-password: ${SSL_KEYSTORE_PASSWORD:${conexao-de-sorte-ssl-keystore-password:}}

spring:
  application:
    name: conexao-scheduler

  profiles:
    default: dev
    active: ${SPRING_PROFILES_ACTIVE:dev}
  main:
    web-application-type: reactive
  codec:
    max-in-memory-size: 10MB

  # OIDC-only: não importar configtree; falhar se segredos ausentes
  config:
    import: []

  # Azure Key Vault via Spring Cloud Azure (OIDC-only)
  cloud:
    azure:
      keyvault:
        secret:
          enabled: ${AZURE_KEYVAULT_ENABLED:false}
          endpoint: ${AZURE_KEYVAULT_ENDPOINT:}
      profile:
        tenant-id: ${AZURE_TENANT_ID}
        subscription-id: ${AZURE_SUBSCRIPTION_ID}
        client-id: ${AZURE_CLIENT_ID}

  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: ${JWT_ISSUER:${conexao-de-sorte-jwt-issuer:https://auth.conexaodesorte.com}}
          jwk-set-uri: ${JWT_JWKS_URI:${conexao-de-sorte-jwt-jwks-uri:https://auth.conexaodesorte.com/.well-known/jwks.json}}

  r2dbc:
    # OIDC-only: exige variáveis ou Key Vault; sem fallback local
    url: ${DATABASE_R2DBC_URL}
    username: ${DATABASE_USERNAME}
    password: ${DATABASE_PASSWORD}

  # Redis Configuration - OIDC-only
  data:
    redis:
      host: ${REDIS_HOST}
      port: ${REDIS_PORT}
      password: ${REDIS_PASSWORD}
      database: ${REDIS_DATABASE}
      timeout: 3000ms
  jackson:
    serialization:
      "[WRITE_DATES_AS_TIMESTAMPS]": false

# Habilitar/desabilitar integração manual com Azure Key Vault
azure:
  keyvault:
    enabled: false

management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
  metrics:
    tags:
      application: conexao-scheduler
  endpoint:
    health:
      show-details: when-authorized

# CORS Configuration - Padrão híbrido
cors:
  allow-credentials: ${CORS_ALLOW_CREDENTIALS:${conexao-de-sorte-cors-allow-credentials:true}}
  allowed-origins: ${CORS_ALLOWED_ORIGINS:${conexao-de-sorte-cors-allowed-origins:*}}

scheduler:
  etl:
    loterias:
      enabled: true
      backoff-ms: 2000
      max-retries: 5
      modalidades:
        - megasena
        - quina
        - lotofacil
        - lotomania
        - duplasena
        - timemania
        - diadesorte
        - supersete
        - loteca
        - milionaria

# Resilience4j Configuration
resilience4j:
  circuitbreaker:
    instances:
      scheduler-etl:
        sliding-window-size: 100
        minimum-number-of-calls: 10
        failure-rate-threshold: 50
        wait-duration-in-open-state: 30s
        permitted-number-of-calls-in-half-open-state: 5
      loteria-extraction:
        sliding-window-size: 50
        minimum-number-of-calls: 5
        failure-rate-threshold: 60
        wait-duration-in-open-state: 20s
        permitted-number-of-calls-in-half-open-state: 3
  timelimiter:
    instances:
      loteria-extraction:
        timeout-duration: 30s
        cancel-running-future: true

logging:
  level:
    root: INFO
    "[org.springframework.web]": INFO
    "[br.tec.facilitaservicos.scheduler]": INFO
    "[io.github.resilience4j]": DEBUG
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level [%X{jobId:-},%X{modalidade:-},%X{data:-}] %logger{36} - %msg%n"
