# ============================================================================
# üå± APPLICATION.YML TEMPLATE PADRONIZADO - MICROSSERVI√áOS CONEX√ÉO DE SORTE
# ============================================================================
# Template otimizado para todos os microsservi√ßos backend com:
# - Spring Boot 3.5.5 configura√ß√µes
# - Secrets management via Docker Secrets
# - Observabilidade completa (Prometheus + Jaeger)
# - Configura√ß√µes de seguran√ßa padronizadas
# - Cache Redis otimizado
# - Database R2DBC + Flyway
# - Resilience patterns (Circuit Breaker, Retry)
# - Profiles para dev/prod
# - Timezone Am√©rica/S√£o Paulo
# ============================================================================

# ========================================
# üåê SERVER CONFIGURATION
# ========================================
server:
  port: ${SERVER_PORT:8088}
  shutdown: graceful
  error:
    include-message: never
    include-binding-errors: never
    include-stacktrace: never
    include-exception: false
  ssl:
    enabled: ${conexao-de-sorte-ssl-enabled:false}
    key-store: ${conexao-de-sorte-ssl-keystore-path:}
    key-store-password: ${conexao-de-sorte-ssl-keystore-password:}
    key-store-type: PKCS12
  netty:
    connection-timeout: 20s

# ========================================
# üå± SPRING BOOT CONFIGURATION
# ========================================
spring:
  config:
    import: 
      - optional:configtree:/run/secrets/
      - optional:file:./config/
  application:
    name: conexao-scheduler
  profiles:
    default: prod
  main:
    allow-bean-definition-overriding: true
  jackson:
    time-zone: America/Sao_Paulo
    locale: pt_BR
    default-property-inclusion: non_null
    serialization:
      write-dates-as-timestamps: false
      indent-output: false
    deserialization:
      fail-on-unknown-properties: false

  # ========================================
  # ‚òÅÔ∏è AZURE KEY VAULT CONFIGURATION
  # ========================================
  cloud:
    azure:
      keyvault:
        secret:
          enabled: ${AZURE_KEYVAULT_ENABLED:false}

  # ========================================
  # üóÑÔ∏è DATABASE CONFIGURATION (R2DBC)
  # ========================================
  r2dbc:
    url: ${conexao-de-sorte-database-r2dbc-url:r2dbc:mysql://conexao-mysql:3306}/conexao_sorte_scheduler?useSSL=true&allowPublicKeyRetrieval=false&serverTimezone=America/Sao_Paulo&createDatabaseIfNotExist=true
    username: ${conexao-de-sorte-database-username:conexao_user}
    password: ${conexao-de-sorte-database-password:conexao_password}
    pool:
      initial-size: 1
      max-size: 15
      max-idle-time: 30m
      max-acquire-time: 15s
      max-create-connection-time: 10s
      max-life-time: 60m
      validation-query: SELECT 1

  # ========================================
  # üõ†Ô∏è FLYWAY MIGRATION CONFIGURATION
  # ========================================
  flyway:
    enabled: true
    url: ${conexao-de-sorte-database-jdbc-url:jdbc:mysql://conexao-mysql:3306}/conexao_sorte_scheduler?useSSL=true&allowPublicKeyRetrieval=false&serverTimezone=America/Sao_Paulo&createDatabaseIfNotExist=true
    user: ${conexao-de-sorte-database-username:conexao_user}
    password: ${conexao-de-sorte-database-password:conexao_password}
    locations: classpath:db/migration
    baseline-on-migrate: true
    validate-on-migrate: false

  # ========================================
  # üî¥ REDIS CACHE CONFIGURATION
  # ========================================
  data:
    redis:
      host: ${conexao-de-sorte-redis-host:conexao-redis}
      port: ${conexao-de-sorte-redis-port:6379}
      password: ${conexao-de-sorte-redis-password:}
      database: ${REDIS_DATABASE:1}
      timeout: 3000ms
      connect-timeout: 10000ms
      lettuce:
        pool:
          enabled: true
          max-active: 30
          max-idle: 10
          min-idle: 5
          max-wait: 3000ms
          time-between-eviction-runs: 60000ms
        cluster:
          refresh:
            adaptive: true
            period: 30s
      client-type: lettuce

  # ========================================
  # üíæ CACHE CONFIGURATION
  # ========================================
  cache:
    type: redis
    redis:
      time-to-live: 300000ms
      cache-null-values: false
      use-key-prefix: true
    cache-names:
      - conexao-scheduler:default
      - conexao-scheduler:entities
      - conexao-scheduler:queries

  # ========================================
  # üîê SECURITY CONFIGURATION (JWT)
  # ========================================
  security:
    oauth2:
      resourceserver:
        jwt:
          jwk-set-uri: ${conexao-de-sorte-jwt-jwks-uri:http://conexao-autenticacao:8081/.well-known/jwks.json}
          issuer-uri: ${conexao-de-sorte-jwt-issuer:https://auth.conexaodesorte.com}
          audiences: ${conexao-de-sorte-jwt-audience:conexao-de-sorte}

# ========================================
# üè• MANAGEMENT & ACTUATOR CONFIGURATION
# ========================================
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus,env
      base-path: /actuator
  endpoint:
    health:
      show-details: when-authorized
      probes:
        enabled: true
    env:
      show-values: when-authorized
  metrics:
    export:
      prometheus:
        enabled: ${METRICS_ENABLED:true}
    distribution:
      percentiles-histogram:
        http.server.requests: true
    tags:
      service: conexao-scheduler
      environment: ${ENVIRONMENT:prod}
      version: ${VERSION:1.0.0}
  tracing:
    enabled: ${TRACING_ENABLED:true}
    sampling:
      probability: ${TRACING_PROBABILITY:0.1}
  zipkin:
    tracing:
      endpoint: ${ZIPKIN_ENDPOINT:http://conexao-jaeger:9411/api/v2/spans}

# ========================================
# üõ°Ô∏è RESILIENCE4J CONFIGURATION
# ========================================
resilience4j:
  circuitbreaker:
    instances:
      default:
        register-health-indicator: true
        sliding-window-size: 10
        minimum-number-of-calls: 5
        permitted-number-of-calls-in-half-open-state: 3
        automatic-transition-from-open-to-half-open-enabled: true
        wait-duration-in-open-state: 5s
        failure-rate-threshold: 50
        event-consumer-buffer-size: 10
      database:
        sliding-window-size: 20
        minimum-number-of-calls: 10
        wait-duration-in-open-state: 10s
        failure-rate-threshold: 60
  retry:
    instances:
      default:
        max-attempts: 3
        wait-duration: 1s
        enable-exponential-backoff: true
        exponential-backoff-multiplier: 2
      database:
        max-attempts: 5
        wait-duration: 2s
        enable-exponential-backoff: true
  ratelimiter:
    instances:
      default:
        limit-for-period: 100
        limit-refresh-period: 1s
        timeout-duration: 0s

# ========================================
# üìù LOGGING CONFIGURATION
# ========================================
logging:
  level:
    "[br.tec.facilitaservicos.scheduler]": ${SCHEDULER_LOG_LEVEL:INFO}
    root: ${ROOT_LOG_LEVEL:WARN}
    "[org.springframework.security]": WARN
    "[org.springframework.r2dbc]": WARN
    "[io.r2dbc.mysql]": WARN
    "[com.azure]": WARN
    "[org.springframework.cloud.gateway]": INFO
  file:
    name: ${LOG_FILE:/app/logs/application.log}
  pattern:
    file: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level [%X{traceId:-},%X{spanId:-}] %logger{36} - %msg%n"
    console: "%d{HH:mm:ss.SSS} [%thread] %-5level [%X{traceId:-},%X{spanId:-}] %logger{20} - %msg%n"

# ========================================
# üöÄ APPLICATION SPECIFIC CONFIGURATION
# ========================================
app:
  # Feature flags
  features:
    scheduler-microservice: ${FEATURE_SCHEDULER_MS:true}
    audit-logging: ${FEATURE_AUDIT:true}
    metrics-collection: ${FEATURE_METRICS:true}
    circuit-breaker: ${FEATURE_CIRCUIT_BREAKER:true}
    rate-limiting: ${FEATURE_RATE_LIMITING:true}
  
  # JWT Configuration
  jwt:
    access-token-validity: ${JWT_ACCESS_TOKEN_VALIDITY:3600}
    refresh-token-validity: ${JWT_REFRESH_TOKEN_VALIDITY:86400}
    cleanup-interval: ${JWT_CLEANUP_INTERVAL:300}
    key-vault:
      enabled: ${conexao-de-sorte-jwt-keyvault-enabled:false}
  
  # Rate limiting
  rate-limit:
    default-requests-per-minute: ${RATE_LIMIT_DEFAULT:60}
    endpoints:
      "/actuator/**":
        requests-per-minute: 30
      "/api/**":
        requests-per-minute: 100
  
  # Cache configuration
  cache:
    ttl-default: ${CACHE_TTL_DEFAULT:300s}
    ttl-entities: ${CACHE_TTL_ENTITIES:600s}
    ttl-queries: ${CACHE_TTL_QUERIES:180s}

# ========================================
# üåç CORS CONFIGURATION
# ========================================
cors:
  allow-credentials: ${conexao-de-sorte-cors-allow-credentials:true}
  allowed-origins: ${conexao-de-sorte-cors-allowed-origins:https://conexaodesorte.com.br,https://www.conexaodesorte.com.br}
  allowed-methods: GET,POST,PUT,DELETE,OPTIONS
  allowed-headers: "*"
  max-age: 3600

---
# ========================================
# üõ†Ô∏è DEVELOPMENT PROFILE
# ========================================
spring:
  config:
    activate:
      on-profile: dev
  
  # Development database (H2 in-memory for testing)
  r2dbc:
    url: r2dbc:h2:mem:///conexao-scheduler_dev?options=DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE
    username: sa
    password: 
  
  flyway:
    enabled: false  # Disable in dev with H2
  
  # Development Redis (embedded or local)
  data:
    redis:
      host: localhost
      port: 6379
      password: 
      database: 0

# Development logging (more verbose)
logging:
  level:
    "[br.tec.facilitaservicos.scheduler]": DEBUG
    root: INFO
    "[org.springframework.r2dbc]": DEBUG
    "[org.springframework.security]": DEBUG

# Development features
app:
  features:
    audit-logging: false
    metrics-collection: true
  jwt:
    access-token-validity: 300  # 5 minutes for dev
    refresh-token-validity: 3600  # 1 hour for dev

# Development CORS (permissive)
cors:
  allowed-origins: "*"
  allowed-methods: "*"
  allowed-headers: "*"

---
# ========================================
# üè≠ PRODUCTION PROFILE
# ========================================
spring:
  config:
    activate:
      on-profile: prod

# Production logging (restricted)
logging:
  level:
    "[br.tec.facilitaservicos.scheduler]": INFO
    root: WARN

# Production features (all enabled)
app:
  features:
    audit-logging: true
    metrics-collection: true
    circuit-breaker: true
    rate-limiting: true

# Production CORS (restrictive)
cors:
  allowed-origins: ${conexao-de-sorte-cors-allowed-origins:https://conexaodesorte.com.br,https://www.conexaodesorte.com.br}
  allowed-methods: GET,POST,PUT,DELETE,OPTIONS
  allowed-headers: Authorization,Content-Type,X-Requested-With
